/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/pages/background/main.js":
/*!**************************************!*\
  !*** ./src/pages/background/main.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_buffer_detached_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array-buffer.detached.js */ \"./node_modules/core-js/modules/es.array-buffer.detached.js\");\n/* harmony import */ var core_js_modules_es_array_buffer_detached_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_buffer_detached_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_array_buffer_transfer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array-buffer.transfer.js */ \"./node_modules/core-js/modules/es.array-buffer.transfer.js\");\n/* harmony import */ var core_js_modules_es_array_buffer_transfer_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_buffer_transfer_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_array_buffer_transfer_to_fixed_length_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array-buffer.transfer-to-fixed-length.js */ \"./node_modules/core-js/modules/es.array-buffer.transfer-to-fixed-length.js\");\n/* harmony import */ var core_js_modules_es_array_buffer_transfer_to_fixed_length_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_buffer_transfer_to_fixed_length_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.typed-array.to-reversed.js */ \"./node_modules/core-js/modules/es.typed-array.to-reversed.js\");\n/* harmony import */ var core_js_modules_es_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.typed-array.to-sorted.js */ \"./node_modules/core-js/modules/es.typed-array.to-sorted.js\");\n/* harmony import */ var core_js_modules_es_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_typed_array_with_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.typed-array.with.js */ \"./node_modules/core-js/modules/es.typed-array.with.js\");\n/* harmony import */ var core_js_modules_es_typed_array_with_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_with_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_esnext_iterator_constructor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/esnext.iterator.constructor.js */ \"./node_modules/core-js/modules/esnext.iterator.constructor.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_constructor_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_constructor_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_esnext_iterator_filter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/esnext.iterator.filter.js */ \"./node_modules/core-js/modules/esnext.iterator.filter.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_filter_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_filter_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_esnext_iterator_find_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/esnext.iterator.find.js */ \"./node_modules/core-js/modules/esnext.iterator.find.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_find_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_find_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_esnext_iterator_for_each_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/esnext.iterator.for-each.js */ \"./node_modules/core-js/modules/esnext.iterator.for-each.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_for_each_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_for_each_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_esnext_iterator_map_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/esnext.iterator.map.js */ \"./node_modules/core-js/modules/esnext.iterator.map.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_map_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_map_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/web.dom-exception.stack.js */ \"./node_modules/core-js/modules/web.dom-exception.stack.js\");\n/* harmony import */ var core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var core_js_modules_web_url_search_params_delete_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/web.url-search-params.delete.js */ \"./node_modules/core-js/modules/web.url-search-params.delete.js\");\n/* harmony import */ var core_js_modules_web_url_search_params_delete_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_search_params_delete_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var core_js_modules_web_url_search_params_has_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/web.url-search-params.has.js */ \"./node_modules/core-js/modules/web.url-search-params.has.js\");\n/* harmony import */ var core_js_modules_web_url_search_params_has_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_search_params_has_js__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var core_js_modules_web_url_search_params_size_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.url-search-params.size.js */ \"./node_modules/core-js/modules/web.url-search-params.size.js\");\n/* harmony import */ var core_js_modules_web_url_search_params_size_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_search_params_size_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ffmpeg/ffmpeg */ \"./node_modules/@ffmpeg/ffmpeg/src/index.js\");\n/* harmony import */ var _ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_16__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  createFFmpeg,\n  fetchFile\n} = (_ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_16___default());\nconst ffmpeg = createFFmpeg({\n  corePath: chrome.runtime.getURL(\"/js/ffmpeg-core.js\"),\n  // 核心文件的路径\n  log: true // 是否在控制台打印日志，true => 打印\n});\nconsole.log('background is open');\nlet currentActiveId = 0;\nlet stockAllInfo = [];\nlet currentCookie = '';\nlet currentMallId = '';\nlet PaiPaiWareHouse = [];\nlet haveTime = '';\nlet currentCode = '';\nlet PaiPaiWrehouseId = [{\n  \"id\": 1131,\n  \"name\": \"派派仓-洛杉矶\",\n  \"relas\": \"派派美西\"\n}, {\n  \"id\": 1216,\n  \"name\": \"派派仓-新泽西1\",\n  \"relas\": \"派派美东\"\n}, {\n  \"id\": 1215,\n  \"name\": \"派派仓-达拉斯\",\n  \"relas\": \"派派德州\"\n}, {\n  \"id\": 1214,\n  \"name\": \"派派仓-迈阿密\",\n  \"relas\": \"派派佛州\"\n}];\nlet accountList = localStorage.getItem('accountList') ? JSON.parse(localStorage.getItem('accountList')) : [];\n// 页面加载完就触发我这个\nasync function getRate() {\n  const result = await exchangeRate({\n    \"from_money\": ChineseToCode(\"美元\"),\n    \"to_money\": ChineseToCode(\"人民币\"),\n    \"from_money_num\": \"1\",\n    \"srcid\": \"5293\",\n    \"sid\": \"60277_61027_60853_61362_61679_61734_61780_61822_61844_61777_61804_61879_61986\"\n  });\n  return result;\n}\n\n// 时间格式化\nfunction formatTime(date = new Date(), format = 'YYYY-MM-DD HH:mm:ss') {\n  const padZero = num => num < 10 ? '0' + num : num;\n  const year = date.getFullYear();\n  const month = padZero(date.getMonth() + 1); // getMonth() 返回0-11，因此加1\n  const day = padZero(date.getDate());\n  const hours = padZero(date.getHours());\n  const minutes = padZero(date.getMinutes());\n  const seconds = padZero(date.getSeconds());\n  return format.replace(/YYYY/, year).replace(/MM/, month).replace(/DD/, day).replace(/HH/, hours).replace(/mm/, minutes).replace(/ss/, seconds);\n}\n\n// 如果用户一次性下载多个亚马逊视频,这个地方用来存储等会要下载的数据\nlet amazonVideoList = [];\nchrome.runtime.onMessage.addListener(async (params, sender, sendResponse) => {\n  const XLSX = __webpack_require__(/*! xlsx */ \"./node_modules/xlsx/xlsx.mjs\");\n  /** @description demo */\n  // async function mergeTsToMp4(files, outputFileName) {\n  //     files.forEach(async file => {\n  //         ffmpeg.FS(\"writeFile\", \"demo\", await fetchFile(file));\n  //     })\n  //     await ffmpeg.run('-i', \"demo\", '-r', '120', 'output.mp4');\n  //     const data = ffmpeg.FS('readFile', 'output.mp4');\n  //     // 合并完了,要下载了\n  //     const downloadUrl = window.URL.createObjectURL(new Blob([data.buffer], {type:'video/mp4'}))\n  //     console.log(downloadUrl)\n  //     const AmazonVideoEl = document.createElement('a')\n  //     AmazonVideoEl.href = downloadUrl\n  //     AmazonVideoEl.download = \"demo.mp4\"\n  //     document.body.appendChild(AmazonVideoEl)\n  //     AmazonVideoEl.click()\n  // }\n  // 使用示例\n  if (!ffmpeg.isLoaded()) {\n    await ffmpeg.load(); // 如果未加载，则加载\n  }\n  // mergeTsToMp4([], 'mergedVideo.mp4');\n  if (params.message === 'getRate') {\n    const result = await getRate();\n    // 把汇率的信息发送给前台\n    // 发给Content,Content展示到前台\n    chrome.tabs.query({\n      active: true\n    }, tabs => {\n      console.log(tabs, '233');\n      // 当前所在的网页\n      const currentTab = tabs.filter(item => item.active);\n      const currentWindow = currentTab.length && currentTab[0];\n      console.log(currentWindow, '2');\n      currentActiveId = currentWindow.id;\n      MessageToWindow(currentWindow.id, 'rate', result);\n    });\n  } else if (params.message === 'getAbroadStock') {\n    // 证明进来的这个地方是要去发送请求,拿到我shipout的token,一般一次就是24小时,先从本地拿\n    accountList = localStorage.getItem('accountList');\n    if (!accountList) {\n      // 直接显示一个加号,让用户自行添加,这个地方直接点击添加账号就行了,不用我咋操作\n    }\n  } else if (params.message === 'login') {\n    console.log('来啦');\n    let {\n      phone,\n      pwd\n    } = params.data;\n    // 去登录,看看咋个事,拿到请求的结果,然后显示我看看先\n    const url = 'https://oms.shipout.com/api/auth-server/oauth/token';\n    await getTokenByPhone({\n      url,\n      phone,\n      pwd\n    });\n  } else if (params.message == 'getStockInThis') {\n    // 每次拿的时候,都要重新刷新下存储\n    stockAllInfo.length = 0;\n    // 获取数据之后发给content.js 这个地方要去发请求并且,携带token\n    if (!params.data.length) {\n      // 证明当前是没有账号的,点击就是无效的,打印console就行了\n      console.log('当前并没有账号,请添加后再次点击');\n    } else {\n      let stockInfo, getPaiPaiStock, getHouseUrl;\n      const flag = await getAllStock(params, stockInfo, getPaiPaiStock, getHouseUrl);\n      if (flag.length) {\n        // 证明有问题,那么这个时候就要那个啥了,重新获取里面的token,然后重新传递进去\n        const url = 'https://oms.shipout.com/api/auth-server/oauth/token';\n        const reflashList = [];\n        for (let index = 0; index < flag.length; index++) {\n          const globalToken = await getTokenByPhone({\n            url,\n            phone: flag[index].phone,\n            pwd: flag[index].pwd\n          }, true);\n          reflashList.push({\n            phone: flag[index].phone,\n            pwd: flag[index].pwd,\n            token: globalToken\n          });\n        }\n        console.log('这是需要重新发请求的', reflashList);\n        // 这个地方直接更新就行了\n        for (let index = 0; index < reflashList.length; index++) {\n          const errorItem = reflashList[index];\n          const SaveItem = accountList.find(item => item.phone == errorItem.phone);\n          SaveItem.token = reflashList[index].token;\n        }\n        // 更新本地的存储数据\n        localStorage.setItem('accountList', JSON.stringify(accountList));\n        // 搞完就要开始去拿stock了,看看是哪个函数,一般搞完就是一次性过了,不会再返回了,如果有就提醒研发来看吧\n        const flag2 = await getAllStock({\n          data: reflashList\n        }, stockInfo, getPaiPaiStock, getHouseUrl);\n        if (flag2.length) {\n          // 咨询研发,或者直接把账号删除,重新添加\n          console.log('咨询研发,或者直接把账号删除,重新添加');\n        }\n      }\n      // 循环完事了就要发给contentjs了\n      // 传过去的时候先格式化一次\n      // 这个地方去拿一下数据吧,通过那个cookie\n      const PaiPaiHeader = new Headers();\n      const xiaomiCookie = localStorage.getItem('dianxiaomicookie');\n      let xiaomiData = [];\n      if (xiaomiCookie) {\n        PaiPaiHeader.append('Cookie', xiaomiCookie);\n        PaiPaiHeader.append('Content-Type', 'application/json');\n        for (let index = 0; index < PaiPaiWrehouseId.length; index++) {\n          const PaiPaiResult = await fetch('https://pcpc.jfwms.net/oms/inventory/list', {\n            method: 'POST',\n            body: JSON.stringify({\n              \"warehouseId\": PaiPaiWrehouseId[index].id,\n              \"inquireType\": 2,\n              \"searchType\": \"sku\",\n              \"searchContent\": \"\",\n              \"orderBy\": \"sku\",\n              \"desc\": 2,\n              \"pageNo\": 1,\n              \"pageSize\": 50\n            }),\n            headers: PaiPaiHeader\n          }).then(res => res.json());\n          // 判断一下\n          if (!PaiPaiResult.status) {\n            const reg = /[A-Za-z0-9!@_]+(?:-[A-Za-z0-9@!_]+(?:\\s(?=.*[a-zA-Z]+)[a-zA-Z0-9]+)?)+/;\n            // 证明成功了,那就进行格式化,再发到前台去\n            let forMatData = PaiPaiResult.data.page.rows.map(item => {\n              const isFormatSku = reg.test(item.name);\n              // 匹配不到\n              if (!isFormatSku) {\n                // 换一个正则判断是不是全部djaljdlaj这种\n                const reg2 = /[A-Za-z0-9@!_]{8,}/;\n                const itemSku2 = reg2.exec(item.name);\n                if (itemSku2) {\n                  // 证明是,那还是一样\n                  return {\n                    ItemName: item.name,\n                    ItemSku: itemSku2[0].replace(/@/, ''),\n                    ItemStock: item.total,\n                    subItemList: [{\n                      warehouseName: item.warehouseName,\n                      omsAvailableQuantity: item.total\n                    }]\n                  };\n                } else {\n                  // 不然这种情况下,就只能是Sku了,直接返回\n                  return {\n                    ItemName: item.sku,\n                    ItemSku: item.sku.replace(/@/, ''),\n                    ItemStock: item.total,\n                    subItemList: [{\n                      warehouseName: item.warehouseName,\n                      omsAvailableQuantity: item.total\n                    }]\n                  };\n                }\n              } else {\n                return {\n                  ItemName: item.name,\n                  ItemSku: reg.exec(item.name)[0].replace(/@/, ''),\n                  ItemStock: item.total,\n                  subItemList: [{\n                    warehouseName: item.warehouseName,\n                    omsAvailableQuantity: item.total\n                  }]\n                };\n              }\n            });\n            console.log(forMatData, '来了昂');\n            if (xiaomiData.length) {\n              // 证明有,这个时候forMatData已经格式化好了,开始来合并\n              xiaomiData.forEach(data_item => {\n                const sameItem = forMatData.find(format_item => format_item.ItemSku === data_item.ItemSku);\n                if (sameItem) {\n                  // 如果存在就合并\n                  data_item.ItemStock += +sameItem.ItemStock;\n                  data_item.subItemList = data_item.subItemList.concat(sameItem.subItemList);\n                }\n              });\n            } else {\n              xiaomiData = xiaomiData.concat(forMatData);\n            }\n          }\n          await delayFn();\n        }\n        // console.log(PaiPaiResult, '派派的数据')\n      }\n      MessageToWindow(currentActiveId, 'StockInfo', {\n        statu: 200,\n        msg: \"库存信息获取成功\",\n        data: stockAllInfo.concat(xiaomiData)\n      });\n    }\n  } else if (params.message == 'dianxiaomicookie') {\n    // 我拿到了,看看Cookie是多少\n    console.log(params.cookie);\n    // 只要拿到了,就把Cookie存储起来\n    localStorage.setItem('dianxiaomicookie', params.cookie);\n  } else if (params.message == 'downloadFile') {\n    // 拿到了\n    console.log(params.data, '拿到了');\n    const myHeader = new Headers();\n    myHeader.append('cookie', currentCookie);\n    myHeader.append('Mallid', currentMallId);\n    myHeader.append('Content-Type', 'application/json');\n    // const one_url = 'https://pftka-us.temu.com/pmm/api/pmm/defined'\n\n    const url = 'https://agentseller-us.temu.com/mms/eagle/package/main_batch_query';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: myHeader,\n      body: JSON.stringify({\n        \"page_number\": 1,\n        \"page_size\": 200,\n        \"sort_type\": 1\n        // \"call_begin_time\": 1737289443,\n        // \"call_end_time\": 1739881443\n      })\n    }).then(res => res.json());\n    console.log(response);\n    let format_Data = [];\n    let globalOrderList = [];\n    let xlsxData = [['订单号', '参考号', '平台', '发货仓库', '面单类型', '物流', '运单号', '商品SKU', '商品单价', '数量', '订单金额', '币种', '收件人', '手机号', '邮箱', '邮政编码', '国家', '省/州', '市/府', '区/县', '详细地址', '详细地址2']];\n    const dirName = formatTime(new Date(), 'MM月DD日HH时mm分');\n    if (response.success) {\n      format_Data = response.result.package_info_result_list.filter(item => {\n        if (params.data.includes(item.order_send_info_list[0].parent_order_sn)) {\n          return true;\n          // return {\n          //     Po: item.order_send_info_list[0].parent_order_sn,\n          //     Pk: item.package_sn\n          // }\n        }\n      });\n      // 这个地方去拿订单列表\n      const order_url = 'https://agentseller-us.temu.com/kirogi/bg/mms/recentOrderList';\n      const order_response = await fetch(order_url, {\n        method: 'POST',\n        headers: myHeader,\n        body: JSON.stringify({\n          \"fulfillmentMode\": 0,\n          \"pageNumber\": 1,\n          \"pageSize\": 100,\n          \"queryType\": 0,\n          \"sortType\": 1,\n          \"timeZone\": \"UTC+8\",\n          \"parentAfterSalesTag\": 0,\n          \"sellerNoteLabelList\": []\n        })\n      }).then(res => res.json());\n      if (order_response.success) {\n        // 拿到所有的订单\n        const {\n          pageItems\n        } = order_response.result;\n        // 保存到全局\n        globalOrderList = pageItems;\n      }\n      for (let i = 0; i < format_Data.length; i++) {\n        const item = format_Data[i];\n        const warehouseName = formatWareHouseName(item.warehouse_name);\n        const currentOrder = globalOrderList.find(order => {\n          if (order.orderList[0].orderPackageInfoList === null) {\n            return false;\n          }\n          if (order.orderList[0].orderPackageInfoList[0].packageSn === item.package_sn) {\n            return true;\n          }\n        });\n        // 在这里还要拿到用户的信息\n        const user_url = 'https://agentseller-us.temu.com/mms/orchid/address/snapshot/order_shipping_address_query';\n        const user_response = await fetch(user_url, {\n          method: 'POST',\n          headers: myHeader,\n          body: JSON.stringify({\n            \"parent_order_sn\": item.order_send_info_list[0].parent_order_sn\n          })\n        }).then(res => res.json());\n        if (user_response.success) {\n          console.log(user_response);\n          xlsxData.push([item.order_send_info_list[0].parent_order_sn, '', 'TEMU', warehouseName, '自有面单', item.shipping_company_name, item.tracking_number, currentOrder.orderList[0].extCodeList[0], '', item.order_send_info_list[0].quantity, '', '', user_response.result.receipt_name, '', '', '', 'US', '', '', '', '', '']);\n          console.log(globalOrderList, currentOrder, user_response, xlsxData);\n        }\n      }\n      // 创建一个表下载\n      const ws = XLSX.utils.aoa_to_sheet(xlsxData);\n      // 创建一个工作表\n      const new_wb = XLSX.utils.book_new();\n      // 写入\n      XLSX.utils.book_append_sheet(new_wb, ws, \"sheet1\");\n      XLSX.writeFileXLSX(new_wb, `${dirName}/半托订单信息表.xlsx`);\n      // 格式化仓库名称\n      function formatWareHouseName(warehouse) {\n        let warehouseName = '';\n        const houseList = PaiPaiWrehouseId.filter(item => item.relas === warehouse);\n        if (houseList.length) {\n          warehouseName = houseList[0].name;\n        }\n        if (warehouseName) {\n          return warehouseName;\n        } else {\n          return warehouse;\n        }\n      }\n      console.log(format_Data);\n    }\n    // 去请求pdf地址\n    const pdf_url = 'https://agentseller-us.temu.com/mms/eagle/package/batch_print_shipping_label';\n    const downloadList = [];\n    function getUrl() {\n      format_Data.forEach(async (value, index) => {\n        const pdf_data = {\n          \"package_sn_list\": [value.package_sn],\n          \"download\": true,\n          \"merge_files\": true,\n          \"batch_event_type\": 1\n        };\n        const result = await fetch(pdf_url, {\n          method: 'POST',\n          body: JSON.stringify(pdf_data),\n          headers: myHeader\n        }).then(res => res.json());\n        console.log(result);\n        if (result.success) {\n          // 拿到了，那就先拿地址，然后下载\n          const url = result.result.merged_shipping_label_url;\n          downloadList.push({\n            fileName: `${value.order_send_info_list[0].parent_order_sn}.pdf`,\n            url\n          });\n          console.log(downloadList, result.result);\n        }\n        await delayFn();\n        if (index === format_Data.length - 1) {\n          // 这个是告诉contentjs的,但是我们用download的api就不用这个方式了 \n          //  MessageToWindow(currentActiveId, 'downloadOrder', {\n          //     list: downloadList,\n          //     dirName\n          //  })\n          downloadList.forEach(async item => {\n            console.log(item);\n            chrome.downloads.download({\n              url: item.url,\n              saveAs: false,\n              // true的话会弹出让你确认保存地址的窗,设置false\n              filename: `${dirName}/${item.fileName}`,\n              //这样就可以了,不要出现../ .这些也不要出现/ 直接开头就是本地浏览器保存的文件夹目录下了\n              conflictAction: 'uniquify'\n            });\n            await delayFn();\n          });\n        }\n      });\n    }\n    getUrl();\n    // 去前台拿一个id\n  } else if (params.message == \"getId\") {\n    console.log(params.data, '我是id');\n    currentCookie = params.data.cookie;\n    currentMallId = params.data.id;\n  } else if (params.message == \"customPath\") {\n    // 测试代码,测试chrome.downloads用的\n    // console.log(params.data, '我是路径')\n    // chrome.downloads.download({\n    //     url: params.data,\n    //     saveAs: false, // true的话会弹出让你确认保存地址的窗,设置false\n    //     filename: 'demo/123.jpg', //这样就可以了,不要出现../ .这些也不要出现/ 直接开头就是本地浏览器保存的文件夹目录下了\n    //     conflictAction: 'uniquify'\n    // }, () => {\n    //     console.log('开始下载了哈')\n    // })\n  } else if (params.message == 'checkCode') {\n    let code = '';\n    // 这个地方是去验证验证码\n    console.log(params.data, '我是验证码');\n    // 验证成功了, 然后去请求数据\n    // 60077.2027y.866a4a5b-c4f6-4b90-ae16-789b53a937b1\n    // 43569.2027y.24696\n    const info = params.data.code;\n    // 76340.2027y.e6d1cfb3-9ae3-4f32-b71a-eedbc6374ce6$y50659\n    const key = atob(params.data.param);\n    // 传递的info,先存起来中间那个y的,和那个246的,以及存储key\n    if (info.trim() && key.trim()) {\n      // 验证下是否已经到期\n      const failedTime = key.split('.')[3] + key.split('.')[0];\n      const currentTime = new Date().getTime();\n      console.log(failedTime, currentTime);\n      if (currentTime - failedTime > 1000 * 120) {\n        // 相当于已经超时一秒了,那么就是验证不过\n        MessageToPopup('vertifyResult', {\n          statu: false\n        });\n        return;\n      }\n      code = key.split('.')[2];\n      if (code === info) {\n        // 存储code\n        currentCode = info;\n        // 告诉popup\n        MessageToPopup('vertifyResult', {\n          statu: true\n        });\n      }\n    }\n  } else if (params.message == 'loginCode') {\n    // 这次是登录了,不过,得验证下\n    if (params.data.param.trim()) {\n      // 拿code\n      const format_code = atob(params.data.param);\n      const codeEl = format_code.split('.')[2].split('$y')[1];\n      const timeEl = format_code.split('.')[1];\n      // 进行对比\n      if (codeEl == currentCode) {\n        try {\n          // 要去判断下,要在本地存什么了\n          const danwei = timeEl.slice(-1);\n          // 时间\n          const time = +timeEl.slice(0, timeEl.length - 1);\n          let stramp = '';\n          switch (danwei) {\n            case 'y':\n              stramp = 1000 * 60 * 60 * 24 * 365 * time;\n              break;\n            case 'm':\n              stramp = 1000 * 60 * 60 * 24 * 30 * time;\n              break;\n            case 'd':\n              stramp = 1000 * 60 * 60 * 24 * time;\n              break;\n            case 'w':\n              stramp = 1000 * 60 * 60 * 24 * 7 * time;\n              break;\n            case 'h':\n              stramp = 1000 * 60 * 60 * time;\n              break;\n            case 'f':\n              stramp = 1000 * 60 * time;\n          }\n          console.log(new Date().getTime() + stramp);\n          localStorage.setItem('times', new Date().getTime() + stramp);\n        } catch (err) {\n          MessageToPopup(\"loginResult\", {\n            statu: false\n          });\n          return;\n        }\n        // 通过了\n        MessageToPopup(\"loginResult\", {\n          statu: true\n        });\n      }\n    }\n  } else if (params.message == 'download_TEMU_Pic') {\n    const size = params.size;\n    switch (size) {\n      case '180':\n      case '800':\n        const currentT = new Date().getTime();\n        for (let index = 0; index < params.downloadList.length; index++) {\n          const downloadItem = params.downloadList[index];\n          chrome.downloads.download({\n            url: downloadItem[size],\n            saveAs: false,\n            filename: `${currentT}TEMU商品图/${downloadItem.imgName}`,\n            conflictAction: 'uniquify'\n          });\n          await delayFn();\n        }\n        break;\n      default:\n        console.log('暂无对应的资源下载');\n    }\n  } else if (params.message == 'download_TEMU_Video') {\n    chrome.downloads.download({\n      url: params.videoHref,\n      saveAs: false,\n      filename: `视频.mp4`,\n      conflictAction: 'uniquify'\n    });\n  } else if (params.message == 'download_amazon_Video') {\n    amazonVideoList.unshift(params.tsFileList);\n    if (amazonVideoList.length === 1) {\n      await downloadAmazonVideo(amazonVideoList.pop());\n    }\n  } else if (params.message == 'downloadAmazonPic') {\n    let picList = params.picList;\n    picList = picList.map(item => /http.*\\.jpg/.exec(item)[0]);\n    if (picList.length) {\n      // 直接下载,然后命名的话就01到...吧\n      let dateEl = new Date();\n      picList.forEach(async (item, index) => {\n        chrome.downloads.download({\n          url: item,\n          saveAs: false,\n          filename: `amazon-${dateEl.getFullYear()}年${dateEl.getMonth() + 1}月${dateEl.getDate()}日/${index + 1}.jpg`,\n          conflictAction: 'uniquify'\n        });\n        await delayFn();\n      });\n    }\n  }\n});\n\n// 下载亚马逊视频的函数\nasync function downloadAmazonVideo(list) {\n  // 下载看看能拿到什么\n  let bufferLen = 0;\n  let allBatter = [];\n  for (let index = 0; index < list.length; index++) {\n    const buffers = await fetch(list[index]).then(res => res.arrayBuffer());\n    bufferLen += buffers.byteLength;\n    // 拿到里面的内容,然后合并给我\n    const batterData = new Uint8Array(buffers);\n    allBatter.push(batterData);\n  }\n  if (allBatter.length) {\n    // 存储文件名称\n    const inputFiles = [];\n    allBatter.forEach((buffer, index) => {\n      const fileName = `file${index}.ts`;\n      ffmpeg.FS('writeFile', fileName, buffer);\n      inputFiles.push(`file '${fileName}'`);\n    });\n    // 再写一个文本\n    ffmpeg.FS('writeFile', 'filelist.txt', inputFiles.join('\\n'));\n    // 合并ts文件\n    await ffmpeg.run('-f', 'concat', '-safe', '0', '-i', 'filelist.txt', '-c', 'copy', 'demo.ts');\n    // 读取文件\n    const data = ffmpeg.FS('readFile', 'demo.ts');\n    const url = URL.createObjectURL(new Blob([data.buffer], {\n      type: 'video/MP4'\n    }));\n    chrome.downloads.download({\n      url,\n      saveAs: false,\n      filename: `amazon/${String(new Date().getTime()).slice(3, 7)}.mp4`,\n      conflictAction: 'uniquify'\n    });\n    // const a = document.createElement('a');\n    // a.style.display = 'none';\n    // a.href = url;\n    // const dateEl = new Date()\n    // a.download = `amazon_video-${dateEl.getFullYear()}/${(dateEl.getMonth()+1)}/${dateEl.getDate()}.mp4`;\n    // document.body.appendChild(a);\n    // a.click();\n    // 进来就先清理掉\n    ffmpeg.FS('unlink', 'filelist.txt');\n    // 继续下载\n    // 判断我当前的list,看看是不是要继续调用\n    if (amazonVideoList.length) {\n      await downloadAmazonVideo(amazonVideoList.pop());\n    }\n  }\n}\n\n// 文字转码\nfunction ChineseToCode(font) {\n  return encodeURIComponent(font);\n}\nfunction getEachData() {}\n\n// 这个地方就是去登录\nasync function LoginByPhone(options) {\n  return await fetch(options.url, options.data).then(res => res.json());\n}\nasync function getAllStock(params, stockInfo, getPaiPaiStock, getHouseUrl) {\n  let errorList = [];\n  // 如果有,那就要循环去拿到每一个账号对应的库存那些数据,然后给contentjs在前台显示\n  for (let index = 0; index < params.data.length; index++) {\n    // 这个地方要判断一下,如果是邱总的号就要单独的处理了\n    if (/^szt.+(?=@126.com)/.test(params.data[index].phone)) {\n      // 请求仓库对应的数据地址 ==> https://oms.shipout.com/api/wms-user/user/afterLogin?orgType=1\n      getHouseUrl = 'https://oms.shipout.com/api/wms-user/user/afterLogin?orgType=1';\n      const PaiPaiHouse = await LoginByPhone({\n        url: getHouseUrl,\n        data: {\n          headers: {\n            'Authorization': `Bearer ${params.data[index].token}`\n          }\n        }\n      });\n      if (PaiPaiHouse.result === 'OK') {\n        // 证明有数据,那么格式化之后直接丢到我的全局里面去\n        PaiPaiWareHouse = PaiPaiHouse.data.warehouseList.map(warehouse => ({\n          warehouseId: warehouse.warehouseId,\n          warehouseName: warehouse.warehouseName\n        }));\n        // 接下去就要去拿库存数据了,这个又是单独的请求路径\n        getPaiPaiStock = 'https://oms.shipout.com/api/shipout-stock2/oms/stock/querySkuStockBySku';\n        const PaiPaiStock = await LoginByPhone({\n          url: getPaiPaiStock,\n          data: {\n            headers: {\n              'Authorization': `Bearer ${params.data[index].token}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              \"queryType\": \"OnlyInStock\",\n              \"sourceType\": \"Inbound\",\n              \"curPageNo\": 1,\n              \"pageSize\": 60\n            }),\n            method: 'post'\n          }\n        });\n        if (PaiPaiStock.result === 'OK') {\n          // 直接推到一块去先，看看拿到什么数据\n          let {\n            records\n          } = PaiPaiStock.data;\n          // 拿到结构的所有数据,我们直接弄一个数组存起来\n          // 在这里就要格式化了已经 笑死\n          records = records.map(item => {\n            // 再循环一下里面的四个仓进行替换\n            for (let index = 0; index < item.warehouseStockList.length; index++) {\n              const PaiPaiStockItem = item.warehouseStockList[index];\n              // 找到对应的仓库名称\n              const warehouseItem = PaiPaiWareHouse.find(warehouse => warehouse.warehouseId === PaiPaiStockItem.warehouseId);\n              // 然后拿到对应的名称添加进去\n              PaiPaiStockItem.warehouseName = warehouseItem.warehouseName;\n            }\n            return {\n              ItemName: item.sku.skuNameEN.replace(/@/, ''),\n              ItemSku: item.sku.omsSku.replace(/@/, ''),\n              ItemStock: item.qty.standardQty,\n              //实际库存\n              subItemList: item.warehouseStockList.map(warehouse => ({\n                warehouseName: warehouse.warehouseName,\n                omsAvailableQuantity: warehouse.qty.standardQty\n              }))\n            };\n          });\n          stockAllInfo.push(...records);\n        } else {\n          console.log('这个有毛病');\n        }\n        // 直接下一个 continue\n        continue;\n      }\n    } else {\n      // 地址,基本是固定的，我们直接点击300条一次就行了\n      const url = 'https://oms.shipout.com/api/wms-business/oms/stock/list?showSkuType=1&pageSize=300&curPageNo=1';\n      stockInfo = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${params.data[index].token}`\n        }\n      }).then(res => res.json());\n    }\n    console.log('这是请求到的数据', stockInfo);\n    if (stockInfo.result === 'OK') {\n      // 证明请求到数据了,这个时候我们就可以拿到当前我的所有SKU以及所对应的可用数量\n      const {\n        records\n      } = stockInfo.data;\n      // 拿到结构的所有数据,我们直接弄一个数组存起来\n      stockAllInfo.push(...records.map(item => ({\n        ItemName: item.skuNameEN.replace(/@/, ''),\n        ItemSku: item.omsSku.replace(/@/, ''),\n        ItemStock: item.omsAvailableQuantity,\n        //实际库存\n        subItemList: item.subItemList.map(item => ({\n          warehouseName: item.warehouseName,\n          omsAvailableQuantity: item.omsAvailableQuantity\n        }))\n      })));\n    } else {\n      // 证明没拿到数据,这个时候要console下 一般是不会出现这种情况的\n      console.log(\"账号\" + params.data[index].phone + '出问题,没有拿到数据');\n      // 这个地方其实就是token过期了,重新登陆一次并且,保存之后再调用这个函数就行了,所以\n      // 那么就是没请求到,证明token有毛病,就得收集起来\n      errorList.push({\n        phone: params.data[index].phone,\n        pwd: params.data[index].pwd\n      });\n    }\n    // 强制等待一秒\n    await delayFn();\n  }\n  return errorList;\n}\n\n// 这个是先登录成功,然后去拿数据\nasync function getTokenByPhone(options, flag) {\n  let {\n    url,\n    phone,\n    pwd\n  } = options;\n  let globalToken;\n  // 设置一个数组来存放数据\n  if (flag) {\n    // 这个是重新登陆就行,不用重新添加\n    for (let index = 0; index < 1; index++) {\n      // 发送的数据是formdata\n      const sendData = new FormData();\n      sendData.append('grant_type', 'password');\n      sendData.append('username', phone);\n      sendData.append('password', pwd);\n      sendData.append('scope', 'oms');\n      sendData.append('systemType', 'OMS');\n      sendData.append('client_secret', 7700);\n      sendData.append('client_id', \"browser-oms\");\n      //发请求\n      const result = await fetch(url, {\n        method: 'post',\n        body: sendData\n      }).then(res => res.json());\n      if (result.userId?.length) {\n        // 我已经拿到了,可以更新你的local了\n        setTimeout(() => {\n          // 发送给popup\n          MessageToPopup(\"addSuccess\", {\n            phone,\n            pwd,\n            token: result.access_token\n          });\n        });\n        globalToken = result.access_token;\n      } else {\n        // 没有拿到就报错\n        console.log('第二次拿数据拿不到数据,请检查代码逻辑是否出错');\n      }\n    }\n    console.log('自动更新账号数据成功');\n  } else {\n    // 获取cookies\n    chrome.cookies.getAll({\n      url: 'https://oms.shipout.com'\n    }, async cookie => {\n      // 搞了那么久，原来这玩意不用Cookie就可以拿到token\n      // console.log('cookie', cookie)\n      // 要整一个Cookies 试试看是不是Cookie是固定的,我假设下\n      // let Cookies = cookie.map(item => `${item.name}=${item.value}`)\n      // 加一个\n      // Cookies.push('__hssrc=1')\n      // 全部合成\n      // Cookies = Cookies.join(';')\n\n      // 设置一个请求头\n      const myHeaders = new Headers();\n      // 设置类型\n      // 发送的数据是formdata\n      const sendData = new FormData();\n      sendData.append('grant_type', 'password');\n      sendData.append('username', phone);\n      sendData.append('password', pwd);\n      sendData.append('scope', 'oms');\n      sendData.append('systemType', 'OMS');\n      sendData.append('client_secret', 7700);\n      sendData.append('client_id', \"browser-oms\");\n      //发请求\n      const result = await fetch(url, {\n        method: 'post',\n        body: sendData,\n        headers: myHeaders,\n        credentials: 'include'\n      }).then(res => res.json());\n      console.log('验证token', result);\n      // 判断是不是拿到了token\n      if (result.userId?.length) {\n        // 并且告诉父亲说,我已经拿到了,可以更新你的local了\n        setTimeout(() => {\n          // 发送给content\n          MessageToWindow(currentActiveId, 'addAccount', {\n            statu: 200,\n            msg: \"添加成功,账号为\" + result.userName,\n            phone,\n            pwd\n          });\n          // 发送给popup\n          MessageToPopup(\"addSuccess\", {\n            phone,\n            pwd,\n            token: result.access_token\n          });\n        });\n        globalToken = result.access_token;\n      } else {\n        setTimeout(() => {\n          MessageToWindow(currentActiveId, 'addAccount', {\n            statu: 201,\n            msg: \"添加失败,账号为\" + phone\n          });\n          MessageToPopup(\"addFail\", {\n            phone\n          });\n        });\n      }\n    });\n    console.log('添加账号成功');\n  }\n  return globalToken;\n}\n\n// 给特定的window的id发指定的消息\nfunction MessageToWindow(id, msg, data) {\n  chrome.tabs.sendMessage(id, {\n    type: msg,\n    data\n  });\n}\nfunction MessageToPopup(msg, data) {\n  chrome.extension.sendMessage({\n    message: msg,\n    data\n  });\n}\nasync function exchangeRate(data) {\n  let url = 'https://sp0.baidu.com/5LMDcjW6BwF3otqbppnN2DJv/finance.pae.baidu.com/vapi/async/v1?';\n  // from_money=%E7%BE%8E%E5%85%83&to_money=%E4%BA%BA%E6%B0%91%E5%B8%81&from_money_num=1&srcid=5293&sid=60277_61027_60853_61362_61679_61734_61780_61822_61844_61777_61804_61879_61986&cb=jsonp_1737599045478_60405\n  for (const key in data) {\n    url += `${key}=${data[key]}&`;\n  }\n  url = url.toString(0, url.length - 1);\n  const {\n    Result\n  } = await fetch(url).then(res => res.json());\n  const allData = Result[1];\n  // 拿到对应的转化名称\n  const Title = allData.Title;\n  // 拿到对应的汇率\n  // Result[1].DisplayData.resultData.tplData.result.cur\n  const price = allData.DisplayData.resultData.tplData.result.cur.num;\n  return {\n    Title,\n    price\n  };\n}\n\n/**\n * 强制等待\n * @param {number} timeout 延迟毫秒数\n */\nasync function delayFn(timeout = 1000) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, timeout);\n  });\n}\n\n//# sourceURL=webpack://vue3-chrome-ext-template/./src/pages/background/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"background": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkvue3_chrome_ext_template"] = self["webpackChunkvue3_chrome_ext_template"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["chunk-vendors"], function() { return __webpack_require__("./src/pages/background/main.js"); })
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;